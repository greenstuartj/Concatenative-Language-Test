
def stack-foldl {
  .    init func -- init ;
  elem init func -- init elem func apply func recur
}

def foldl { init func -- :{ init func stack-foldl } uncons drop }

def insert {
  Empty new-data -- (Tree new-data Empty Empty) ;
  (Tree data left right) new-data -- new-data data lt?
  {
    True  -- (Tree data left new-data insert right) ;
    False -- (Tree data left right new-data insert)
  }
}

def invert {
  Empty -- Empty ;
  (Tree data left right) -- (Tree data right invert left invert)
}

def flatten {
  Empty -- [ ] ;
  (Tree data left right) -- left recur data right recur cons append
}

def tree-sort { Empty [ insert ] foldl flatten }
def tree-sort-desc { Empty [ insert ] foldl invert flatten }

[ 5 7 3 2 6 1 100 ] "Original: " print drop println
                    dup tree-sort
		    "Sorted:   " print drop println
		    drop "" println drop
		    "Original: " print drop println
                    tree-sort-desc
		    "Sorted:   " print drop println
